<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>targets on Modelling with R</title>
    <link>https://modelling-with-r.netlify.app/tags/targets/</link>
    <description>Recent content in targets on Modelling with R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Thu, 22 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://modelling-with-r.netlify.app/tags/targets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>makepipe vs targets</title>
      <link>https://modelling-with-r.netlify.app/pipelines/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://modelling-with-r.netlify.app/pipelines/</guid>
      <description>Workflow managementMakefiles are a way of controlling large programming projects. Complex software is typically organised into multiple files of code. Each file requires compilation before the object files are linked together with pre-compiled libraries to create the final executable. When a change is made to one section of the code, it is important to recompile everything affected by that change, but not the code files that are unaffected. A makefile contains a list of all of the code files and libraries together with a set of rules that determine when re-compilation will be needed.</description>
    </item>
    
    <item>
      <title>My Evolving Workflow</title>
      <link>https://modelling-with-r.netlify.app/recent_progress/</link>
      <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://modelling-with-r.netlify.app/recent_progress/</guid>
      <description>Workflow ChangesI like to preach the importance of having a consistent workflow across all of one’s data analysis projects. Consistency is both more efficient and it helps reduce errors. Yet, nothing can exist without change and despite my wish for consistency, my workflow is constantly evolving. Sometimes it changes for good reason, sometimes for experimentation and sometimes because I just get bored with the old way.
My plan for this post is to discuss some of the recent changes in the way that I organise my data analysis projects.</description>
    </item>
    
    <item>
      <title>Creating a blog post with targets</title>
      <link>https://modelling-with-r.netlify.app/targets_example/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://modelling-with-r.netlify.app/targets_example/</guid>
      <description>IntroductionThis post describes how I used the targets package to help create my blog post on the Bayesian analysis of the superstore profit data. It should be read alongside that post and together with my methods post on targets.
The Bayesian analysis of the superstore profits is just complex enough to provide a vehicle for discussing the benefits of targets.
Folder StructureFirst, I created a folder with the structure discussed in my methods post.</description>
    </item>
    
    <item>
      <title>Methods: The `targets` Package</title>
      <link>https://modelling-with-r.netlify.app/targets_package/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://modelling-with-r.netlify.app/targets_package/</guid>
      <description>IntroductionI have recently been converted to the merits of the targets package and like all recent converts, I am keen to spread the word, so I thought that I would use targets for some of my Bayesian posts. In this post, I introduce targets, then in a subsequent post, I’ll explain how I used targets to help create my post on the Bayesian analysis of superstore profits.</description>
    </item>
    
  </channel>
</rss>
